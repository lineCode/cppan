[/ Copyright (C) 2013 Kozlov Taras ]
[/ Distributed under the Boost Software License, Version 1.0 ]
[/ (see accompanying file LICENSE_1_0.txt or a copy at ]
[/ http://www.boost.org/LICENSE_1_0.txt) ]
[/ Home at https://github.com/tarasko/cppan ]

[library cppan
    [quickbook 1.6]
    [version 1.0]
    [copyright 2013, Kozlov Taras]
    [purpose Compile time arbitrary annotations for class members]
    [license
        Distributed under the Boost Software License, Version 1.0
        (see accompanying file LICENSE_1_0.txt or a copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[section Introduction]

Lacking of introspection and annotations in C++ language is one of reasons that stops people from writing libraries with really convenient interface 
in some specific domains. Those are: 

* Mapping different data sources entities onto c++ class members. These particulary include mapping of database entities, and building orm libraries.
* Distributed applications: objects must be serialized and restored with minimal efforts.

There are two workarounds:

* Whenever additional information abount members and types are required, library can ship special template traits class. Develeper can specialize it to make 
library work with his type correctly. This solution doesn`t involve additional preprocessing tools, however force to duplicate information about class members. 
[@http://www.boost.org/doc/libs/1_52_0/libs/serialization/doc/tutorial.html#simplecase Boost.Serialization] is good example of such approach. You have to write 
those *serialize* functions always. Other representative example is [@http://www.webtoolkit.eu/wt/doc/tutorial/dbo/tutorial.html#_mapping_a_single_class Wt.Dbo] project.

* Additional preprocessing tools, that may use C++ parser to evaluate code structure and generate additional entities. Theses entities can be used to introspect 
user objects in generic manner. However you need to get these tools installed, since then you can`t just use pure C++ compiler to process your code.
Examples are [@http://www.cpgf.org/ cpgf library], [@http://qt-project.org/ Qt] and [@http://www.codesynthesis.com/products/odb/ odb]

[br ]

The goal of cppan is to provide C++ constructs allowing to associate arbitrary annotations with class members, introspect member is generic way and access annotations during 
compile and runtime. Library also offer simple integration with Boost.Serialization and Boost.Hash. cppan use 
[@http://www.boost.org/doc/libs/1_52_0/libs/preprocessor/doc/index.html Boost.Preprocessor] and  
[@http://www.boost.org/doc/libs/1_52_0/libs/fusion/doc/html Boost.Fusion] to achieve that goal. 

[endsect]

[section Tutorial]
[section Declaring type with annotated members]

Here is how you can declare class members with annotations

``
#include <cppan/cppan.hpp>

struct A
{
    CPPAN_DECLARE_AND_ANNOTATE(
        ((int, int_field_,
            ((int_annotation, 42))
            ((string_annotation, "Hello world"))
        ))
        ((std::string, string_field_,
            ((no_serialization, std::true_type()))
            ((no_hash, std::true_type()))
        ))
        ((double, no_ann_field_, CPPAN_NIL_SEQ))
      )
};
``

[macroref CPPAN_DECLARE_AND_ANNOTATE] utilize [@http://www.boost.org/doc/libs/1_52_0/libs/preprocessor/doc/index.html Boost.Preprocessor] sequences to declare members, 
and sequence of annotations associated with each member. The code above effectively expands into following

``
struct A
{
    // --------------------------------------------------------------------------------------------------
    // This typedef is a marker that type has used CPPAN_DECLARE_AND_ANNOTATE to declare it`s members. 
    // Use cppan::has_annotations metafunction to determine presence of this typedef in compile time.
    // --------------------------------------------------------------------------------------------------

    typedef void annotated_tag; 
    
    // --------------------------------------------------------------------------------------------------
    // Members
    // --------------------------------------------------------------------------------------------------

    int int_field_; 
    std::string string_field_; 
    double no_ann_field_;   
    
    // --------------------------------------------------------------------------------------------------
    // Each member has associated nested structure with annotations
    // --------------------------------------------------------------------------------------------------

    struct annotations_for_int_field_ 
    { 
        // During construction members get annotation values
        annotations_for_int_field_ () 
            :  int_annotation(42) 
            , string_annotation("Hello world")   
        {} 
        
        decltype(42) int_annotation; 
        decltype("Hello world") string_annotation;   
    }; 
    
    struct annotations_for_string_field_ 
    { 
        annotations_for_string_field_ () 
            :  no_serialization(std::true_type())
            , no_hash(std::true_type())   
        {} 
        
        // Developer can use types that incorporate annotation values, in that case annotation values can
        // be accessed during compile time.
        decltype(std::true_type()) no_serialization; 
        decltype(std::true_type()) no_hash;   
    }; 
    
    // Annotations type is created for member without annotations, however it doesn`t incorporate any annotations
    struct annotations_for_no_ann_field_ 
    { 
        annotations_for_no_ann_field_ ()   {}   
    };   
    
    // --------------------------------------------------------------------------------------------------
    // typedefs for return type of annotated_tuple const and mutable member functions.
    // --------------------------------------------------------------------------------------------------
    
    typedef boost::fusion::vector< 
        ::cppan::annotated_member< int, annotations_for_int_field_> 
      , ::cppan::annotated_member< std::string, annotations_for_string_field_> 
      , ::cppan::annotated_member< double, annotations_for_no_ann_field_>  
      > annotated_tuple_type; 
    
    typedef boost::fusion::vector< 
        ::cppan::annotated_member<const  int, annotations_for_int_field_> 
      , ::cppan::annotated_member<const  std::string, annotations_for_string_field_> 
      , ::cppan::annotated_member<const  double, annotations_for_no_ann_field_>  
      > const_annotated_tuple_type; 
    
    // --------------------------------------------------------------------------------------------------
    // annotated_tuple member function can be used to introspect members with associated annotation type.
    // --------------------------------------------------------------------------------------------------

    annotated_tuple_type annotated_tuple() 
    { 
        return annotated_tuple_type( int_field_ , string_field_ , no_ann_field_  ); 
    } 
        
    const_annotated_tuple_type annotated_tuple() const 
    { 
        return const_annotated_tuple_type( int_field_ , string_field_ , no_ann_field_  ); 
    }
};
``

[classref cppan::annotated_member] bounds together reference to annotated member and annotations struct type.
[br ]

Using [classref cppan::has_annotations] metafunction, we can test if class member was declared with annotations.  
``
BOOST_MPL_ASSERT((has_annotations<A::annotations_for_string_field_>));
BOOST_MPL_ASSERT_NOT((has_annotations<int>));
``
[endsect]

[section Direct access to members and annotations]
After we have declared our structure we want access it's members and annotation types:
``
A a;

a.int_field_ = 100;
a.string_field_ = "string field";
a.no_ann_field_ = 20.;

A::annotations_for_int_field_ a1;
A::annotations_for_string_field_ a2;
A::annotations_for_no_ann_field_ a3;

cout << "Value of int_annotation for A::int_field_" << a1.int_annotation << endl;
``
[endsect]

[section Define member tester metafunction]
To determine if A::annotations_for_string_field_ has no_hash annotation, we need to define metafunction that check
presence of no_hash member with [macroref CPPAN_DEFINE_MEMBER_DETECTOR]. 

``
#include <boost/mpl/assert.hpp>

CPPAN_DEFINE_MEMBER_DETECTOR(no_hash);

BOOST_MPL_ASSERT((has_no_hash<A::annotations_for_string_field_>));
BOOST_MPL_ASSERT_NOT((has_no_hash<A::annotations_for_int_field_>));
BOOST_MPL_ASSERT_NOT((has_no_hash<int>));
``

[endsect]
has_no_hash also contains specialization for [classref cppan::annotated_member annotated_member] class. In that case it will step into annotations type to check presence of 
desired annotation.
``
BOOST_MPL_ASSERT((has_no_hash<cppan::annotated_member< std::string, A::annotations_for_string_field_> >));
BOOST_MPL_ASSERT_NOT((has_no_hash<cppan::annotated_member< int, A::annotations_for_int_field_> >));
``

[section Introspect members and annotations]
Power of [@http://www.boost.org/doc/libs/1_52_0/libs/fusion/doc/html Boost.Fusion] can be applied to  members and annotations since 
annotated_tuple return [@http://www.boost.org/doc/libs/1_52_0/libs/fusion/doc/html Boost.Fusion] sequence.
``
struct dump_members
{
    template<typename MemberType, typename AnnotationsType>
    void operator()(const cppan::annotated_member<MemberType, AnnotationsType>& member) const
    {
        cout << "Member value: " << member.value_ << endl;

        // We can make compile time check here whether member has specific annotation
        cout << "\tHas no_hash annotation: " << has_no_hash<AnnotationsType>::value << endl;
    }
};

...
boost::fusion::for_each(a.annotated_tuple(), dump_members());
``

[endsect]
[endsect]

[xinclude reference.xml]